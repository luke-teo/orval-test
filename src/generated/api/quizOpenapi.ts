/**
 * Generated by orval v6.15.0 üç∫
 * Do not edit manually.
 * quiz-openapi
 * OpenAPI documentation of CKQuiz API endpoints.
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  ApiV1AnswerCreate200,
  ApiV1AnswerCreateBody,
  ApiV1AnswerRatio200,
  ApiV1MeDetail200,
  ApiV1QuestionAnsweredList200,
  ApiV1QuestionUnansweredList200,
  ApiV1QuestionViewDetail200,
  ApiV1QuestionViewDetailBody,
  ApiV1DeliveryListDates200,
  ApiV1DeliveryListDatesBody,
  ApiV1DeliveryList200,
  ApiV1DeliveryListBody,
  ApiV1DeliveryDateUpdate200,
  ApiV1DeliveryDateUpdateBody,
  ApiV1DeliveryWeekdayList200,
  ApiV1DeliveryWeekdayUpdate200,
  ApiV1DeliveryWeekdayUpdateBody,
  ApiV1OrganizationSettingsDetail200,
  EmptyResponseDto,
  ApiV1OrganizationSettingsUpdateBody,
  ApiV1QuestionCreate200,
  ApiV1QuestionCreateBody,
  ApiV1QuestionUpdate200,
  ApiV1QuestionUpdateBody,
  ApiV1QuestionDelete200,
  ApiV1QuestionDeleteBody,
  ApiV1QuestionDeliveredDetail200,
  ApiV1QuestionDeliveredDetailBody,
  ApiV1QuestionDeliveredList200,
  ApiV1QuestionDeliveryStatus200,
  ApiV1QuestionImport200,
  ApiV1QuestionImportBody,
  ApiV1QuestionStats200,
  ApiV1QuestionStatsBody,
  ApiV1QuestionUndeliveredDetail200,
  ApiV1QuestionUndeliveredDetailBody,
  ApiV1QuestionUndeliveredList200
} from '../model'


  
  /**
 * Health Check
 * @summary API Health Check
 */
export const healthCheck = (
    healthCheckBody: string[], options?: AxiosRequestConfig
 ): Promise<AxiosResponse<string[]>> => {
    return axios.get(
      `/api/health/check`,options
    );
  }


export const getHealthCheckKey = (healthCheckBody: string[],) => [`/api/health/check`, healthCheckBody] as const;

    
export type HealthCheckQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheck>>>
export type HealthCheckQueryError = AxiosError<unknown>

export const useHealthCheck = <TError = AxiosError<unknown>>(
 healthCheckBody: string[], options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof healthCheck>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getHealthCheckKey(healthCheckBody) : null);
  const swrFn = () => healthCheck(healthCheckBody, axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Authentication Logout
 * @summary Auth - Logout
 */
export const authLogout = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.get(
      `/api/v1/auth/logout`,options
    );
  }


export const getAuthLogoutKey = () => [`/api/v1/auth/logout`] as const;

    
export type AuthLogoutQueryResult = NonNullable<Awaited<ReturnType<typeof authLogout>>>
export type AuthLogoutQueryError = AxiosError<unknown>

export const useAuthLogout = <TError = AxiosError<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof authLogout>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAuthLogoutKey() : null);
  const swrFn = () => authLogout(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Authentication CSRF Token
 * @summary Auth - CSRF Token
 */
export const authCSRFToken = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.get(
      `/api/v1/auth/csrf-token`,options
    );
  }


export const getAuthCSRFTokenKey = () => [`/api/v1/auth/csrf-token`] as const;

    
export type AuthCSRFTokenQueryResult = NonNullable<Awaited<ReturnType<typeof authCSRFToken>>>
export type AuthCSRFTokenQueryError = AxiosError<unknown>

export const useAuthCSRFToken = <TError = AxiosError<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof authCSRFToken>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }

  ) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAuthCSRFTokenKey() : null);
  const swrFn = () => authCSRFToken(axiosOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * Upon user answering a question
 * @summary Answer - Create
 */
export const apiV1AnswerCreate = (
    apiV1AnswerCreateBody: ApiV1AnswerCreateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1AnswerCreate200>> => {
    return axios.post(
      `/api/v1/answer/create`,
      apiV1AnswerCreateBody,options
    );
  }



/**
 * Retrieving ratio of answered and unanswered questions
 * @summary Answer - Ratio
 */
export const apiV1AnswerRatio = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1AnswerRatio200>> => {
    return axios.post(
      `/api/v1/answer/ratio`,undefined,options
    );
  }



/**
 * Me Detail
 * @summary Me - Detail
 */
export const apiV1MeDetail = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1MeDetail200>> => {
    return axios.post(
      `/api/v1/me/detail`,undefined,options
    );
  }



/**
 * Get answered question list
 * @summary Question - Answered List
 */
export const apiV1QuestionAnsweredList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionAnsweredList200>> => {
    return axios.post(
      `/api/v1/question/answered-list`,undefined,options
    );
  }



/**
 * Get unanswered question list
 * @summary Question - Unanswered List
 */
export const apiV1QuestionUnansweredList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionUnansweredList200>> => {
    return axios.post(
      `/api/v1/question/unanswered-list`,undefined,options
    );
  }



/**
 * View selected question detail
 * @summary Question - View Detail
 */
export const apiV1QuestionViewDetail = (
    apiV1QuestionViewDetailBody: ApiV1QuestionViewDetailBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionViewDetail200>> => {
    return axios.post(
      `/api/v1/question/view-detail`,
      apiV1QuestionViewDetailBody,options
    );
  }



/**
 * Get delivery dates list
 * @summary Delivery - List Dates
 */
export const apiV1DeliveryListDates = (
    apiV1DeliveryListDatesBody: ApiV1DeliveryListDatesBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1DeliveryListDates200>> => {
    return axios.post(
      `/api/v1/delivery/list-dates`,
      apiV1DeliveryListDatesBody,options
    );
  }



/**
 * Get list of deliveries
 * @summary Delivery - List
 */
export const apiV1DeliveryList = (
    apiV1DeliveryListBody: ApiV1DeliveryListBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1DeliveryList200>> => {
    return axios.post(
      `/api/v1/delivery/list`,
      apiV1DeliveryListBody,options
    );
  }



/**
 * Update delivery dates
 * @summary DeliveryDate - Update
 */
export const apiV1DeliveryDateUpdate = (
    apiV1DeliveryDateUpdateBody: ApiV1DeliveryDateUpdateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1DeliveryDateUpdate200>> => {
    return axios.post(
      `/api/v1/delivery-date/update`,
      apiV1DeliveryDateUpdateBody,options
    );
  }



/**
 * Get list of weekday deliveries
 * @summary DeliveryWeekday - List
 */
export const apiV1DeliveryWeekdayList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1DeliveryWeekdayList200>> => {
    return axios.post(
      `/api/v1/delivery-weekday/list`,undefined,options
    );
  }



/**
 * Update weekday deliveries
 * @summary DeliveryWeekday - Update
 */
export const apiV1DeliveryWeekdayUpdate = (
    apiV1DeliveryWeekdayUpdateBody: ApiV1DeliveryWeekdayUpdateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1DeliveryWeekdayUpdate200>> => {
    return axios.post(
      `/api/v1/delivery-weekday/update`,
      apiV1DeliveryWeekdayUpdateBody,options
    );
  }



/**
 * Get organization settings detail
 * @summary OrganizationSettings - Detail
 */
export const apiV1OrganizationSettingsDetail = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1OrganizationSettingsDetail200>> => {
    return axios.post(
      `/api/v1/organization-settings/detail`,undefined,options
    );
  }



/**
 * Update organization settings
 * @summary OrganizationSettings - Update
 */
export const apiV1OrganizationSettingsUpdate = (
    apiV1OrganizationSettingsUpdateBody: ApiV1OrganizationSettingsUpdateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<EmptyResponseDto>> => {
    return axios.post(
      `/api/v1/organization-settings/update`,
      apiV1OrganizationSettingsUpdateBody,options
    );
  }



/**
 * Create questions
 * @summary Question - Create
 */
export const apiV1QuestionCreate = (
    apiV1QuestionCreateBody: ApiV1QuestionCreateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionCreate200>> => {
    return axios.post(
      `/api/v1/question/create`,
      apiV1QuestionCreateBody,options
    );
  }



/**
 * Update question
 * @summary Question - Update
 */
export const apiV1QuestionUpdate = (
    apiV1QuestionUpdateBody: ApiV1QuestionUpdateBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionUpdate200>> => {
    return axios.post(
      `/api/v1/question/update`,
      apiV1QuestionUpdateBody,options
    );
  }



/**
 * Delete question
 * @summary Question - Delete
 */
export const apiV1QuestionDelete = (
    apiV1QuestionDeleteBody: ApiV1QuestionDeleteBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionDelete200>> => {
    return axios.post(
      `/api/v1/question/delete`,
      apiV1QuestionDeleteBody,options
    );
  }



/**
 * Get delivered question detail
 * @summary Question - Delivered Detail
 */
export const apiV1QuestionDeliveredDetail = (
    apiV1QuestionDeliveredDetailBody: ApiV1QuestionDeliveredDetailBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionDeliveredDetail200>> => {
    return axios.post(
      `/api/v1/question/delivered-detail`,
      apiV1QuestionDeliveredDetailBody,options
    );
  }



/**
 * Get list of delivered question
 * @summary Question - Delivered List
 */
export const apiV1QuestionDeliveredList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionDeliveredList200>> => {
    return axios.post(
      `/api/v1/question/delivered-list`,undefined,options
    );
  }



/**
 * Get delivery status of question
 * @summary Question - Delivery Status
 */
export const apiV1QuestionDeliveryStatus = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionDeliveryStatus200>> => {
    return axios.post(
      `/api/v1/question/delivery-status`,undefined,options
    );
  }



/**
 * Import question from csv
 * @summary Question - Import
 */
export const apiV1QuestionImport = (
    apiV1QuestionImportBody: ApiV1QuestionImportBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionImport200>> => {
    return axios.post(
      `/api/v1/question/import`,
      apiV1QuestionImportBody,options
    );
  }



/**
 * Get question stats
 * @summary Question - Stats
 */
export const apiV1QuestionStats = (
    apiV1QuestionStatsBody: ApiV1QuestionStatsBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionStats200>> => {
    return axios.post(
      `/api/v1/question/stats`,
      apiV1QuestionStatsBody,options
    );
  }



/**
 * Get detail of undelivered question
 * @summary Question - Undelivered Detail
 */
export const apiV1QuestionUndeliveredDetail = (
    apiV1QuestionUndeliveredDetailBody: ApiV1QuestionUndeliveredDetailBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionUndeliveredDetail200>> => {
    return axios.post(
      `/api/v1/question/undelivered-detail`,
      apiV1QuestionUndeliveredDetailBody,options
    );
  }



/**
 * Get list of undelivered question
 * @summary Question - Undelivered List
 */
export const apiV1QuestionUndeliveredList = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<ApiV1QuestionUndeliveredList200>> => {
    return axios.post(
      `/api/v1/question/undelivered-list`,undefined,options
    );
  }



